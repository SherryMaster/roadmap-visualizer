rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // ============================================================================
    // HELPER FUNCTIONS
    // ============================================================================

    // Check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Check if user owns the resource
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Check if the resource is public
    function isPublic() {
      return resource.data.isPublic == true;
    }

    // Validate user data structure
    function isValidUserData() {
      return request.resource.data.keys().hasAll(['displayName', 'email', 'createdAt']) &&
             request.resource.data.displayName is string &&
             request.resource.data.email is string &&
             request.resource.data.email == request.auth.token.email;
    }

    // Validate roadmap data structure (updated for split format)
    function isValidRoadmapData() {
      return request.resource.data.keys().hasAll(['userId', 'outline', 'isPublic', 'createdAt']) &&
             request.resource.data.userId is string &&
             request.resource.data.userId == request.auth.uid &&
             request.resource.data.isPublic is bool &&
             request.resource.data.outline is map &&
             (!request.resource.data.keys().hasAny(['allowDownload']) || request.resource.data.allowDownload is bool) &&
             (!request.resource.data.keys().hasAny(['enableDependencies']) || request.resource.data.enableDependencies is bool);
    }

    // Validate phase tasks data structure
    function isValidPhaseTasksData() {
      return request.resource.data.keys().hasAll(['roadmapId', 'phaseId', 'tasks', 'createdAt']) &&
             request.resource.data.roadmapId is string &&
             request.resource.data.phaseId is string &&
             request.resource.data.tasks is list;
    }

    // Validate roadmap metadata structure
    function isValidRoadmapMetadata() {
      return request.resource.data.keys().hasAll(['userId', 'title', 'isPublic', 'createdAt']) &&
             request.resource.data.userId is string &&
             request.resource.data.userId == request.auth.uid &&
             request.resource.data.title is string &&
             request.resource.data.title.size() > 0 &&
             request.resource.data.isPublic is bool &&
             (!request.resource.data.keys().hasAny(['allowDownload']) || request.resource.data.allowDownload is bool) &&
             (!request.resource.data.keys().hasAny(['enableDependencies']) || request.resource.data.enableDependencies is bool);
    }

    // Check if user can only update allowed fields
    function isValidUpdate(allowedFields) {
      return request.resource.data.diff(resource.data).affectedKeys().hasOnly(allowedFields);
    }

    // ============================================================================
    // USER PROFILES
    // ============================================================================

    match /users/{userId} {
      // Allow public read access to basic profile information for creator attribution
      // This enables displaying creator names on public roadmaps for all users
      // Only expose displayName and email (fallback) for creator attribution
      allow read: if true;

      // Users can create their own profile with valid data
      allow create: if isOwner(userId) && isValidUserData();

      // Users can update their own profile (restricted fields)
      allow update: if isOwner(userId) &&
                    isValidUpdate(['displayName', 'photoURL', 'preferences', 'lastLoginAt', 'updatedAt']);

      // Users cannot delete their profile (use Firebase Auth for account deletion)
      allow delete: if false;
    }

    // ============================================================================
    // ROADMAPS (Full Data)
    // ============================================================================

    match /roadmaps/{roadmapId} {
      // Read access: Own roadmaps (requires auth) OR public roadmaps (no auth required)
      allow read: if (isAuthenticated() && isOwner(resource.data.userId)) || isPublic();

      // Create: Authenticated users can create roadmaps with valid data
      allow create: if isAuthenticated() && isValidRoadmapData();

      // Update: Only owners can update their roadmaps (expanded fields for editor support)
      allow update: if isAuthenticated() &&
                    isOwner(resource.data.userId) &&
                    isValidUpdate(['outline', 'isPublic', 'allowDownload', 'enableDependencies', 'updatedAt', 'lastAccessed', 'version', 'tags', 'title', 'description', 'project_level']);

      // Delete: Only owners can delete their roadmaps
      allow delete: if isAuthenticated() && isOwner(resource.data.userId);
    }

    // ============================================================================
    // PHASE TASKS (Split from Roadmaps for Size Optimization)
    // ============================================================================

    match /phaseTasks/{phaseTaskId} {
      // Read access: User owns the parent roadmap (requires auth) OR roadmap is public (no auth required)
      allow read: if (
        // Check if user owns the roadmap (requires authentication)
        (isAuthenticated() &&
         exists(/databases/$(database)/documents/roadmaps/$(resource.data.roadmapId)) &&
         get(/databases/$(database)/documents/roadmaps/$(resource.data.roadmapId)).data.userId == request.auth.uid) ||
        // OR roadmap is public (no authentication required)
        (exists(/databases/$(database)/documents/roadmaps/$(resource.data.roadmapId)) &&
         get(/databases/$(database)/documents/roadmaps/$(resource.data.roadmapId)).data.isPublic == true)
      );

      // Create: Allow authenticated users to create phase tasks (roadmap ownership validated by batch operation)
      allow create: if isAuthenticated() && isValidPhaseTasksData();

      // Update: Only if user owns the parent roadmap (expanded fields for editor support)
      allow update: if isAuthenticated() &&
                    exists(/databases/$(database)/documents/roadmaps/$(resource.data.roadmapId)) &&
                    get(/databases/$(database)/documents/roadmaps/$(resource.data.roadmapId)).data.userId == request.auth.uid &&
                    isValidUpdate(['tasks', 'updatedAt', 'createdAt', 'phaseId', 'phaseNumber', 'roadmapId']);

      // Delete: Only if user owns the parent roadmap
      allow delete: if isAuthenticated() &&
                    exists(/databases/$(database)/documents/roadmaps/$(resource.data.roadmapId)) &&
                    get(/databases/$(database)/documents/roadmaps/$(resource.data.roadmapId)).data.userId == request.auth.uid;
    }

    // ============================================================================
    // ROADMAP METADATA (Optimized for Queries)
    // ============================================================================

    match /roadmapMetadata/{roadmapId} {
      // Read access: Own metadata (requires auth) OR public metadata (no auth required)
      allow read: if (isAuthenticated() && isOwner(resource.data.userId)) || isPublic();

      // Create: Authenticated users can create metadata with valid data
      allow create: if isAuthenticated() && isValidRoadmapMetadata();

      // Update: Only owners can update their metadata (restricted fields)
      allow update: if isAuthenticated() &&
                    isOwner(resource.data.userId) &&
                    isValidUpdate(['title', 'description', 'isPublic', 'allowDownload', 'enableDependencies', 'updatedAt', 'lastAccessed',
                                  'totalPhases', 'totalTasks', 'progressPercentage', 'tags', 'projectLevel']);

      // Delete: Only owners can delete their metadata
      allow delete: if isAuthenticated() && isOwner(resource.data.userId);
    }

    // ============================================================================
    // TASK COMPLETIONS
    // ============================================================================

    match /taskCompletions/{userId} {
      // Users can only access their own completion data
      allow read, write: if isOwner(userId);

      // Nested roadmap completions
      match /roadmaps/{roadmapId} {
        // Users can access their own completion data
        allow read, write: if isOwner(userId);

        // Allow reading completion stats for public roadmaps (anonymized)
        allow read: if isAuthenticated() &&
                    exists(/databases/$(database)/documents/roadmaps/$(roadmapId)) &&
                    get(/databases/$(database)/documents/roadmaps/$(roadmapId)).data.isPublic == true;
      }
    }

    // ============================================================================
    // USER PREFERENCES
    // ============================================================================

    match /userPreferences/{userId} {
      // Users can only access their own preferences
      allow read, write: if isOwner(userId);

      // Validate preferences structure on create/update
      allow create, update: if isOwner(userId) &&
                            request.resource.data.keys().hasAll(['theme']) &&
                            request.resource.data.theme in ['light', 'dark', 'auto'];
    }

    // ============================================================================
    // PUBLIC STATISTICS (Read-Only)
    // ============================================================================

    match /publicStats/{document=**} {
      // All authenticated users can read public statistics
      allow read: if isAuthenticated();

      // Only server-side functions can write statistics
      allow write: if false;
    }

    // ============================================================================
    // ROADMAP VOTES
    // ============================================================================

    match /roadmapVotes/{roadmapId} {
      // Read access: Anyone can read vote counts (public data)
      // This allows displaying vote counts to all users, including anonymous
      allow read: if true;

      // Write access: Only authenticated users can vote
      // Users can create/update vote documents for any roadmap
      allow create, update: if isAuthenticated() &&
                            request.resource.data.keys().hasAll(['roadmapId', 'votes', 'totalVotes', 'lastUpdated']) &&
                            request.resource.data.roadmapId is string &&
                            request.resource.data.totalVotes is int &&
                            request.resource.data.votes is map &&
                            request.resource.data.lastUpdated is timestamp;

      // Delete: Only allow if authenticated (for cleanup purposes)
      allow delete: if isAuthenticated();
    }

    // ============================================================================
    // USER COLLECTIONS (Gallery System)
    // ============================================================================

    match /userCollections/{userId} {
      // Users can only access their own collections
      allow read: if isOwner(userId);

      // Nested saved roadmaps
      match /savedRoadmaps/{roadmapId} {
        // Users can read, write, and delete their own saved roadmaps
        allow read, write, delete: if isOwner(userId);

        // Validate saved roadmap data structure
        allow create, update: if isOwner(userId) &&
                              request.resource.data.keys().hasAll(['roadmapId', 'originalOwnerId', 'savedAt']) &&
                              request.resource.data.roadmapId is string &&
                              request.resource.data.originalOwnerId is string &&
                              request.resource.data.savedAt is timestamp;
      }
    }

    // ============================================================================
    // COLLECTION PROGRESS (Gallery System)
    // ============================================================================

    match /collectionProgress/{userId} {
      // Users can only access their own collection progress
      allow read: if isOwner(userId);

      // Nested roadmap progress
      match /roadmaps/{roadmapId} {
        // Users can read, write, and delete their own collection progress
        allow read, write, delete: if isOwner(userId);

        // Validate collection progress data structure
        allow create, update: if isOwner(userId) &&
                              (request.resource.data.keys().hasAny(['completedTasks', 'progressPercentage', 'enableDependencies', 'lastUpdated']) &&
                               (!request.resource.data.keys().hasAny(['completedTasks']) || request.resource.data.completedTasks is map) &&
                               (!request.resource.data.keys().hasAny(['progressPercentage']) || request.resource.data.progressPercentage is number) &&
                               (!request.resource.data.keys().hasAny(['enableDependencies']) || request.resource.data.enableDependencies is bool) &&
                               (!request.resource.data.keys().hasAny(['lastUpdated']) || request.resource.data.lastUpdated is timestamp));
      }
    }

    // ============================================================================
    // ADMIN COLLECTIONS (Future Use)
    // ============================================================================

    match /adminData/{document=**} {
      // Only admin users can access admin data
      // TODO: Implement admin role checking when needed
      allow read, write: if false;
    }

    // ============================================================================
    // SECURITY: Deny all other access
    // ============================================================================

    // Explicitly deny access to any other collections
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
